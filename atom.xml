<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lowbagger World 2.0]]></title>
  <link href="http://chebizarro.github.io/atom.xml" rel="self"/>
  <link href="http://chebizarro.github.io/"/>
  <updated>2014-10-19T13:36:23-07:00</updated>
  <id>http://chebizarro.github.io/</id>
  <author>
    <name><![CDATA[Chris Daley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interacting with Dia throught Python Pt. 1]]></title>
    <link href="http://chebizarro.github.io/blog/2014/10/19/interacting-with-dia-throught-python-pt-1/"/>
    <updated>2014-10-19T13:12:42-07:00</updated>
    <id>http://chebizarro.github.io/blog/2014/10/19/interacting-with-dia-throught-python-pt-1</id>
    <content type="html"><![CDATA[<p>The following posts will be a compilation of things that I have learned when developing plugins for Dia, the Open Source diagram tool. These lessons were learned will developing a plugin for a project I was working on which involved modelling Odata entities.</p>

<p>On the whole I found developing plugins for Dia in parts frustrating because of the lack of documentation and in parts very straight forward and even pleasurable.</p>

<p>Once a concept, such as how handles and connection points interact, is grasped it is relatively easy to do some very interesting things programmatically.</p>

<p>Connection Points and Handles</p>

<p>Each Dia object has a minimum of two handles, which are returned as the second and third tuple elements of a call to Dia.getType(<Element type>). These handles represent the x and y of the object&rsquo;s bounding box. Depending on the type of object, they can be used to connect to other object&rsquo;s connection points.</p>

<p>The most difficult aspect for me to grasp was the order of the connection points array. The documentation simply described it as a vector of connection points. The connection points are represented by a small blue x on the point of the object where another object&rsquo;s handle can be connected (see Diagram 1). In the particular example I will be using, that of a UML Class, the object has 9 connection points by default before any attributes or operations are added. Each additional attribute or operation will add two connection points to the object. The tricky part for me was figuring out which index in the connection point array corresponded to which point on the object. The solution was easy, I simply looped through each connection point and attached the handle of another object to it*. From this I determined that the indexes mapped to the object as per Diagram 2. The first 5 connection points are attached to the top and bottom corners of the &ldquo;header&rdquo; of the object. The next 3 are the bottom left, right and center of the bottom of the object. The subsequent indexes are the attributes and operations items with a connection point on either side of the object. The final index (and this is important) is the centre connection point for the object.</p>

<p>Once you have this figured out, you can then easily iterate through the connection point array and either connect the handle of other objects to them or follow the connected_to property to access the object that it is connected to.</p>

<p><a href="https://mail.gnome.org/archives/dia-list/2012-February/msg00025.html">According to Hans Breur</a>, the maintainer of Dia, the order of items in the connection point array is guaranteed to be stable.</p>

<p>Figuring out how to do this wasn&rsquo;t as easy as it sounds, I wasted a couple of hours before I realised I had to refresh the diagram&rsquo;s conenctions points and display.</p>

<p>The following code is a complete example that can be run in the Python terminal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first pasta post por favor]]></title>
    <link href="http://chebizarro.github.io/blog/2014/10/19/first-pasta-post-por-favor/"/>
    <updated>2014-10-19T11:04:56-07:00</updated>
    <id>http://chebizarro.github.io/blog/2014/10/19/first-pasta-post-por-favor</id>
    <content type="html"><![CDATA[<p>This is my first post as a test of using the Android app more than anything. I guess I should plop in an obligatory</p>

<h1>Hello World!</h1>

<p>There, satisfied?</p>
]]></content>
  </entry>
  
</feed>
