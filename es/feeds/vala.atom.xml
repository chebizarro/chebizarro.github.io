<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Entrar al Pan√≥ptico</title><link href="http://chrisdaley.biz/es/" rel="alternate"></link><link href="http://chrisdaley.biz/feeds/vala.atom.xml" rel="self"></link><id>http://chrisdaley.biz/es/</id><updated>2016-03-31T15:00:00-07:00</updated><entry><title>Towards a Test Driven Development Framework in Vala Part 6. First Release!</title><link href="http://chrisdaley.biz/es/test-driven-development-in-vala-pt-6-en.html" rel="alternate"></link><updated>2016-03-31T15:00:00-07:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-03-31:es/test-driven-development-in-vala-pt-6-en.html</id><summary type="html">&lt;p&gt;Well, it turns out that managing a Rock Band is more time consuming than I first thought, especially if they're getting ready to release their first album. It also turns out that building Debian packages is hard as well, particularly if you're trying to set up a Jenkins CI system to automate the process. Despite all this, I'm only a few weeks behind my initially projected release date and I'm pretty excited to announce that the day has finally come and Version 1.0 of Valadate is now ready for public consumption!&lt;/p&gt;
&lt;p&gt;I'll go through the full feature set (warts and all) shortly, but for those who can't wait to dive in, here's how you can install it...&lt;/p&gt;
&lt;h4&gt;From Source&lt;/h4&gt;
&lt;p&gt;For the adventurous, you can download the source and build and install it yourself. You will need to have the automake toolchain set up on your system and the development libraries for the following installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;glib-2.0&lt;/li&gt;
&lt;li&gt;libxml-2.0&lt;/li&gt;
&lt;li&gt;libxslt&lt;/li&gt;
&lt;li&gt;json-glib-1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll also need Gtk-Doc and Valadoc if you want to build the API documentation.&lt;/p&gt;
&lt;p&gt;Grab the source:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/chebizarro/valadate.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the source directory run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./autogen.sh
make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can pass the &lt;code&gt;--enable-docs&lt;/code&gt; flag to autogen.sh if you have Valadoc and Gtk-Doc installed and it will build the API documentation in the docs directory.&lt;/p&gt;
&lt;p&gt;To install, you then just need to run the following with root privileges:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And that's it, you should be ready to roll. Of course, you'll need to go through this process everytime there's a new release so it might be easier to just install it using your system's package manager. Depending on what that is, you can do the following:&lt;/p&gt;
&lt;h4&gt;Debian&lt;/h4&gt;
&lt;p&gt;Add the repository's key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl https://www.valadate.org/jenkins@valadate.org.gpg.key | sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following to your Software Sources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;https://www.valadate.org/repos/debian&lt;/span&gt; &lt;span class="kp"&gt;valadate&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can install Valadate with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update
sudo apt-get install valadate
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Fedora 23&lt;/h4&gt;
&lt;p&gt;Add the following to /etc/yum.repos.d/valadate.repo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[valadate]&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;valadate&lt;/span&gt;
&lt;span class="na"&gt;baseurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://www.valadate.org/repos/fedora/$releasever/$basearch&lt;/span&gt;
&lt;span class="na"&gt;repo_gpgcheck&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gpgcheck&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gpgkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://www.valadate.org/jenkins@valadate.org.gpg.key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run with root privileges:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dnf update
dnf install valadate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those are the distributions that are available so far, but there's a Homebrew package for Mac OS X that's more or less ready to push. Given the way Valadate works, a Windows release will probably be a little while off as there are a few platform specific issues to be worked through. If you have favourite platform that you would like to see packaged, submit an issue on GitHub and I'll see what I can do.&lt;/p&gt;
&lt;p&gt;So now you've got Valadate, how do you use it?&lt;/p&gt;
&lt;p&gt;The easiest way is to create a Sub Class of the TestCase Abstract Class and add test methods to it, which are any that start with &lt;code&gt;test_&lt;/code&gt;, have no parameters and return &lt;code&gt;void&lt;/code&gt;. These methods will then be detected and executed automatically at runtime.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookTest&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Valadate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test_construct_book&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Arrange ...&lt;/span&gt;

        &lt;span class="c1"&gt;// Act ...&lt;/span&gt;

        &lt;span class="c1"&gt;// Assert ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To compile, pass the following flags and parameters where mytest-0.vala is the source code file containing the above test. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ valac --library mytest-0 --gir mytest-0.gir --pkg valadate-1.0 -X -pie -X -fPIE mytest-0.vala
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order for everything to work correctly, the name of the output binary needs to exactly match that of the .gir file (less the file extension). This will then generate an executable which can be run on the Command Line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ./mtest-0

/LibraryBookTest/construct_book: ** Message: mytest-0.vala:15: running

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run the test binary with &lt;a href="https://testanything.org/"&gt;TAP&lt;/a&gt; output pass the --tap flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ./mtest-0 --tap

&lt;span class="c1"&gt;# random seed: R02Sddf35dad90ff6d1b6603ccb68028a4f0&lt;/span&gt;

1..1

&lt;span class="c1"&gt;# Start of LibraryBookTest tests&lt;/span&gt;

** Message: mytest-0.vala:15: running

ok &lt;span class="m"&gt;1&lt;/span&gt; /LibraryBookTest/construct_book

&lt;span class="c1"&gt;# End of LibraryBookTest tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;[Test]&lt;/code&gt; annotation and parameters are also available for giving test classes and methods more readable names and for supporting asynchronous tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Annotated TestCase with name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTest&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Valadate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Annotated Method With Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;annotated_test_with_name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assert_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Asynchronous Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;test_async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assert_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;skip_test&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assert_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mtest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tap&lt;/span&gt;

&lt;span class="mf"&gt;1..3&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Annotated&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Annotated&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Annotated&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;With&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Annotated&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Asynchronous&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Annotated&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;skip_test&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;SKIP&lt;/span&gt; &lt;span class="n"&gt;Skipping&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;skip_test&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Annotated&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Testing Gtk applications&lt;/h4&gt;
&lt;p&gt;If you want to test Gtk based applications you will need to use the &lt;a href="http://github.com/chebizarro/valadate-gtk"&gt;valadate-gtk&lt;/a&gt; package (available in the same repository). It's usage is almost identical:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ valac --library mytest-0 --gir mytest-0.gir --pkg valadate-gtk-1.0 -X -pie -X -fPIE mytest-0.vala
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The valadate-gtk package makes sure the Gkt Test environment is properly loaded and configured, otherwise you will get all sorts of funky errors.&lt;/p&gt;
&lt;h4&gt;RTFM&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://github.com/chebizarro/valadate/wiki"&gt;Wiki&lt;/a&gt; is pretty scant at the moment but will eventually have detailed instructions on installing and setting up your toolchain with Valadate as well as integrating it with Continuos Integration systems. &lt;/p&gt;
&lt;p&gt;There are a number of sample projects available &lt;a href="https://github.com/chebizarro/valadate-examples"&gt;here&lt;/a&gt; which showcase Valadate's features and how to use it with different toolchains and platforms. This will be continuously updated as new features are added.&lt;/p&gt;
&lt;p&gt;The API reference for Vala can be found &lt;a href="http://www.valadate.org/docs/valadoc/valadate/index.htm"&gt;here&lt;/a&gt; and for C &lt;a href="http://www.valadate.org/docs/gtkdoc/html/"&gt;here&lt;/a&gt;. These documents are automatically generated by Jenkins whenever a new release is made so should always be up-to-date.&lt;/p&gt;
&lt;h3&gt;Next steps...&lt;/h3&gt;
&lt;p&gt;Obviously (hopefully), there will be a tsunami of bug reports once people start using it and finding them. I've tested it on a large array of platforms but there's no saying what will happen once it's in the wild. Aside from that, I am very much keen to get to work on adding BDD support via Gherkin and gradually replacing some of the crustier and more unwieldly elements of GTest under the hood. This will have to come in the time I can find between my regular consulting work which has recently taken off in a big way, and managing a Rock band that's just about to put an album out. Good times!&lt;/p&gt;
&lt;p&gt;&lt;img alt="We salute you" src="http://chrisdaley.biz/es/../images/skype-rock.png" /&gt;&lt;/p&gt;</summary><category term="Vala"></category><category term="Open Source"></category><category term="Programming"></category><category term="TDD"></category><category term="BDD"></category><category term="CoC"></category></entry><entry><title>Hacia un framework de desarrollo guiado por pruebas para Vala - quinta parte - Producto Viable M√≠nimo</title><link href="http://chrisdaley.biz/es/test-driven-development-in-vala-pt-5.html" rel="alternate"></link><updated>2016-02-20T10:00:00-08:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-02-20:es/test-driven-development-in-vala-pt-5.html</id><summary type="html">&lt;p&gt;Las cosas se han ido a toda maquina desde mi ultimo post, con la rama de desarrollo concretizandose paso por paso. Cuando me sent√© a examinar la lista de los requisitos, decid√≠ que el mejor punto de partida para iniciar la primera versi√≥n ser√≠a, por lo menos,  replicar el mismo conjunto de caracter√≠sticas del original. En resumen, esos eran:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Descubrimiento de pruebas como el JUnit o el .NET framework de pruebas&lt;/li&gt;
&lt;li&gt;Ejecutar pruebas para todos los par√°metros de un conjunto especifico&lt;/li&gt;
&lt;li&gt;Funciones de utilidad para esperar en el circuito main hasta que un evento espec√≠fico o timeout ocurre&lt;/li&gt;
&lt;li&gt;Apoyo para Pruebas asincr√≥nicas. Un m√©todo declarado async en Vala sera ejecutado en el circuito main hasta se acaba o despu√©s de un timeout configurable.&lt;/li&gt;
&lt;li&gt;Funciones de utilidad que aportan directorios temporales a las pruebas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estos se han traducido en &lt;a href="https://github.com/chebizarro/valadate/issues"&gt;temas&lt;/a&gt; de GitHub y la &lt;a href="https://waffle.io/chebizarro/valadate"&gt;placa&lt;/a&gt; de Waffle adem√°s de algunas caracter√≠sticas que pienso deber√≠an ser incluidos en el primer corte, es decir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chebizarro/valadate/issues/6"&gt;Apoyo para Geanie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chebizarro/valadate/issues/1"&gt;Ejemplos pr√°cticos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todas esas caracter√≠sticas se han sido a√±adido al &lt;a href="https://github.com/chebizarro/valadate/milestones/Version%201.0.0"&gt;hito&lt;/a&gt; de la versi√≥n 1.0.0 y pues bien, me da mucho placer de decir que despu√©s de un poco menos de dos semanas de esfuerzo concertado, he (re) aplicado casi todas las caracter√≠sticas anteriores! Tomando en cuenta en el nivel de esfuerzo gastado hasta ya, tengo previsto el lanzamiento inicial tan pronto como el 1 de marzo.&lt;/p&gt;
&lt;p&gt;De veras, me entusiasma mucho lo que ha salido del proceso hasta ya. Uno de los picores originales que intentaba rascar al inicio fue el nivel de detalle de las pruebas unitarias en Vala y ya a trav√©s del vud√∫ de XML/XSLT/JSON y GModule creo que lo he logrado. Pues bien, aunque los detalles de la implementaci√≥n sean francamente un poco espantosos, la API que enfrenta al usuario los esconde bastante bien.&lt;/p&gt;
&lt;p&gt;Con una script de construcci√≥n configurada correctamente, el uso de Valadate es tan f√°cil como declarar una subclase de &lt;code&gt;TestCase&lt;/code&gt; y a√±adir unos m√©todos de instancia anotada as√≠:&lt;/p&gt;
&lt;script src="http://gist-it.appspot.com/https://github.com/chebizarro/valadate/blob/version-1.0.0/tests/libvaladate/data/testexetwo.vala?slice=18:"&gt;&lt;/script&gt;

&lt;p&gt;Y ya esta. No se requiere una funci√≥n &lt;code&gt;main&lt;/code&gt;, no hay que agregar las pruebas el en constructor de la &lt;code&gt;TestCase&lt;/code&gt;. Limpio y sencillo, as√≠ como deber√≠a ser. El fragmento de c√≥digo arriba es una prueba real en directo del framework Valadate (la prueba real de la prueba, digamos...) y funciona muy bien, produciendo la salida de TAP tanto en un archivo al terminal -&lt;/p&gt;
&lt;p&gt;&lt;img alt="Love that green!" src="http://chrisdaley.biz/es/../images/terminal.png" /&gt;&lt;/p&gt;
&lt;p&gt;Los lectores astutos se dar√° cuenta de que todav√≠a es GLib.Test lo que manda debajo el cap√≥, aunque esta encapsulado suficientemente para permitir su sustituci√≥n gradual sin afectar como los usuarios escriben sus pruebas. Ahora deber√≠a ser posible a√±adir caracter√≠sticas como eventos y notificaciones sin romper el c√≥digo del usuario.&lt;/p&gt;
&lt;p&gt;La clase &lt;code&gt;TestRunner&lt;/code&gt; maneja el descubrimiento de pruebas a trav√©s de un archivo de Gir creado cuando se compila la prueba. Este fue un concepto clave de la versi√≥n original de Valadate, pero me tom√≥ un paso m√°s all√°, combin√°ndolo con GModule para crear una especie de m√≥dulo de introspecci√≥n "de los pobres". El binario de prueba necesita ser compilado como un ejecutable independiente de posici√≥n (PIE) para que esto funcione, lo que est√° actualmente solamente soportado en Linux y Mac OS X, aunque los fundamentos deben aplicarse a las DLL ejecutables en Windows tambi√©n.&lt;/p&gt;
&lt;p&gt;La &lt;code&gt;TestRunner&lt;/code&gt; actualmente soporta &lt;code&gt;[Test]&lt;/code&gt;, &lt;code&gt;[AsyncTest]&lt;/code&gt; y &lt;code&gt;[SkipTest]&lt;/code&gt; con par√°metros. Aunque sea trivial a√±adir nuevas anotaciones, voy a mantenerlos al m√≠nimo y usar un modelo basado en complementos que les permitir√° decorar y controlan c√≥mo se ejecutan los m√©todos de prueba.&lt;/p&gt;
&lt;p&gt;Por supuesto, si todo eso te parece demasiado raro, todav√≠a puedes hacer las cosas en la manera antigua mediante la adici√≥n de cada m√©todo de prueba en el constructor de la TestCase:&lt;/p&gt;
&lt;script src="http://gist-it.appspot.com/https://github.com/chebizarro/valadate/blob/version-1.0.0/tests/libvaladate/utils/testsignalwaiter.vala?slice=42:47"&gt;&lt;/script&gt;

&lt;p&gt;y el proporcionamiento de tu propio punto de entrada &lt;code&gt;main&lt;/code&gt; as√≠:&lt;/p&gt;
&lt;script src="http://gist-it.appspot.com/https://github.com/chebizarro/valadate/blob/version-1.0.0/tests/libvaladate/utils/main.vala?slice=2:12"&gt;&lt;/script&gt;

&lt;p&gt;en este caso, no se necesita compilar como binario PIE o a√±adir las anotaciones de los m√©todos (no van a funcionar, de todas formas). Aun puedes usar las otras caracter√≠sticas impresionantes como las pruebas asincr√≥nicas, aunque vas a tener m√°s c√≥digo redundante para gestionar.&lt;/p&gt;
&lt;p&gt;Con esta caracter√≠stica ya implementada y en el camino de ser probado s√≥lidamente, me parece que es la hora de fusionar la rama de desarrollo y rollar un lanzamiento. As√≠ que puedo empezar a recibir las reacciones (y los informes de error) a lo que hay antes de la aplicaci√≥n de las caracter√≠sticas m√°s sustanciosos como la integraci√≥n de Gherkin y una interfaz gr√°fica de usuario.&lt;/p&gt;
&lt;p&gt;No hace falta decir que los usuarios no ser√°n capaces de utilizar Valadate bien si no hay documentaci√≥n clara y ejemplos funcionales, entonces he armado varios &lt;a href="https://github.com/chebizarro/valadate/tree/version-1.0.0/examples"&gt;proyectos de ejemplo&lt;/a&gt; y un &lt;a href="https://github.com/chebizarro/valadate/wiki"&gt;wiki&lt;/a&gt;. Tambi√©n he a√±adido soporte para la construcci√≥n de los documentos de Valadoc y GtkDoc en el √°rbol de c√≥digo fuente del proyecto. Todav√≠a se queda un poquito de trabajo antes de la primera versi√≥n, pero la infraestructura ya esta montado (y puedo cerrar &lt;a href="https://github.com/chebizarro/valadate/issues/1"&gt;issue # 1&lt;/a&gt;!).&lt;/p&gt;
&lt;p&gt;Pues nada, voy a terminar este post aca, pa que pueda volver a documentar el trabajo hecho hasta ahora y preparar el lanzamiento para su despliegue. La siguiente entrada sobre Valadate seria sobre el lanzamiento, as√≠ que ahora es un buen momento para decir lo que piensas, en los comentarios o en los lugares "habituales". Gracias por tu atenci√≥n!&lt;/p&gt;</summary><category term="Vala"></category><category term="Open Source"></category><category term="C√≥digo Abierto"></category><category term="Programming"></category><category term="TDD"></category><category term="BDD"></category></entry><entry><title>Hacia un framework de desarrollo guiado por pruebas para Vala - cuarta parte - Quien pone a prueba el probador?</title><link href="http://chrisdaley.biz/es/test-driven-development-in-vala-pt-4.html" rel="alternate"></link><updated>2016-02-04T16:50:00-08:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-02-04:es/test-driven-development-in-vala-pt-4.html</id><summary type="html">&lt;p&gt;Despu√©s de una breva pausa para trabajar en uno de mis otros proyectos (&lt;a href="http://www.last.fm/music/Calisse"&gt;un grupo de Rock 'n Roll&lt;/a&gt;) y terminar con la instalaci√≥n de &lt;a href="http://jenkins.valadate.org:8080"&gt;Jenkins&lt;/a&gt;, he vuelto a trabajar en el proyecto ya oficialmente llamado &lt;a href="https://github.com/chebizarro/valadate"&gt;Valadate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como he mencionado antes, hubo algunos intentos iniciales de desarrollar un framework de TDD para Vala, el &lt;a href="https://github.com/yorba/valadate"&gt;Valadate&lt;/a&gt; siendo lo m√°s extenso de ellos. Despu√©s de pensarlo bien, y un revisi√≥n de la base de c√≥digo existente, decid√≠ que la propuesta m√°s practica seria asumir el papel de mantenedor de proyecto y refundirlo como sea necesario para cumplir los nuevos requisitos que se han sido &lt;a href="http://bit.ly/1ZSrRA6"&gt;recopilados&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Actualmente, el paquete de Valadate dispone de varias clases de utilidad para las tareas como pruebas asincr√≥nicas y directorios temporales adem√°s de un Test Runner de la linea de comando. El proceso para escribir pruebas es crear una implementaci√≥n concreta de la interfaz de Valadate Fixture con las pruebas siendo los m√©todos cuyos nombres empiezan con &lt;code&gt;test_&lt;/code&gt;. La prueba est√° compilado en un binario (una biblioteca compartida) que es ejecutado por el Test Runner. El descubrimiento de pruebas se hace mediante cargar los archivos de .vapi y .gir generado por Vala cuando el binario sea compilado. El sistema de construir es &lt;a href="https://es.wikipedia.org/wiki/Waf"&gt;Waf&lt;/a&gt;, pero para revisar el c√≥digo, lo porte a autotools, un sistema de construir que me resulta m√°s c√≥modo.&lt;/p&gt;
&lt;p&gt;El c√≥digo se compila, pero ha sufrido un poco de pudrici√≥n, con varios avisos de deprecaci√≥n, especialmente las pruebas asincr√≥nicas. El framework si mismo es muy flaco y usar las clases de GLib Test y TestSuite para agrupar y ejecutar las pruebas que se encuentran dentro del binario. En suma no haya m√°s de 1000 lineas de c√≥digo fuente (SLOC en ingles) en el proyecto. Aunque haya algunas ideas interesantes en el c√≥digo actual, he decidido que la mejor propuesta seria empezar de nuevo y integrar lo que sea √∫til y mandar los restos al cielo || infierno binario.&lt;/p&gt;
&lt;p&gt;Ya que hay un repositorio para Valadate armado y actualizado para ser construido con autotools, voy a utilizarlo como el &lt;code&gt;master&lt;/code&gt; de lo que vamos a derivar las varias ramas de desarrollo, siguiendo la practica amplia usada de &lt;a href="http://aprendegit.com/git-flow-la-rama-develop-y-uso-de-feature-branches/"&gt;"GitHub Flow"&lt;/a&gt;, un proceso de gesti√≥n de repositorios que encarna los principios de Integraci√≥n Continua. En una palabra, se implica seis pasos discretos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear una rama para desarrollar una funci√≥n nueva&lt;/li&gt;
&lt;li&gt;Agregar los commits a la rama&lt;/li&gt;
&lt;li&gt;Abrir peticiones de Pull&lt;/li&gt;
&lt;li&gt;Comentar y revisar el c√≥digo&lt;/li&gt;
&lt;li&gt;Desplegar&lt;/li&gt;
&lt;li&gt;Unir&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El principio fundamental (o "la √∫nica regla" como se llama el GitHub) es que la rama &lt;code&gt;master&lt;/code&gt; est√° siempre lista para ser desplegada - que el caso de una herramienta como Valadate implica que se puede tirar, compilar y ejecutar en cualquier momento. As√≠, mientras que la rama &lt;code&gt;master&lt;/code&gt; existente de Valadate no es exactamente lista para producci√≥n, est√° en el estado donde la Fundacion de Yorba dejo de mantenerlo. Por lo menos no da una linea de saque de donde podemos empezar y un poquito de continuidad con el proyecto original, aunque solo sea para dar cr√©dito a los desarrolladores originales por su af√°n.&lt;/p&gt;
&lt;p&gt;Estamos listos para bifurcar nuestra versi√≥n nueva, que vamos a llamarla? El sistema de uso comun es el &lt;a href="http://semver.org/lang/es/"&gt;Versionamiento Sem√°ntico&lt;/a&gt; lo que sigue la convenci√≥n de MAJOR.MINOR.PATCH.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;version MAJOR cuando hay cambios incompatibles a la API&lt;/li&gt;
&lt;li&gt;version MINOR cuando hay funciones nuevas agregadas en una manera compatible con versiones anteriores&lt;/li&gt;
&lt;li&gt;version PATCH cuando hay correcciones de errores compatibles con versiones anteriores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El ultimo lanzamiento de Valadate fue 0.1.1 y no est√° totalmente claro si estaban siguiendo el esquema del Versionamiento Sem√°ntico. Hay distinto n√∫meros de versi√≥n para las API y SO los cual es posible no vamos a usar en nuestro primer lanzamiento. Para que sea sencillo, voy a utilizar el numero de versi√≥n original como el punto de partida. Como vamos a hacer algunos cambios sustanciales que van a romperlo en completo la API de versi√≥n 0, deber√≠amos incrementarlo a uno. Dado que vamos a empezar desde cero, la versi√≥n MINOR se revertir√° a 0 tambi√©n. As√≠ que el nombre de la rama de nuestra nueva implementaci√≥n sera 1.0.0.&lt;/p&gt;
&lt;p&gt;Buenaso. Marcamos el numero!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git checkout -b version-1.0.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El repositorio local ya tiene una rama llamada &lt;code&gt;version-1.0.0&lt;/code&gt; la que nos permite de dar un repaso general del c√≥digo sin afectar la rama "desplegable" de &lt;code&gt;master&lt;/code&gt;. Ya que vamos a romper 
mas cosas que un stoner en una tienda de pipas de agua, bien podemos reorganizar la disposici√≥n de los archivo en algo m√°s convencional y disponer con el sistema de Waf en total.&lt;/p&gt;
&lt;p&gt;La estructura nueva de nuestro repositorio ya parece as√≠:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;valadate&lt;ul&gt;
&lt;li&gt;libvaladate&lt;/li&gt;
&lt;li&gt;src&lt;/li&gt;
&lt;li&gt;tests&lt;ul&gt;
&lt;li&gt;libvaladate&lt;/li&gt;
&lt;li&gt;src&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esta estructura es un modelo bastante com√∫n para los proyectos de tama√±o medio a grande, esencialmente se recrear el √°rbol de c√≥digo fuente dentro del directorio de tests. As√≠ se resulta m√°s f√°cil encontrar las pruebas particulares y significa que las pruebas de integraci√≥n van a siguir el mismo modelo b√°sico a la hora de ser compilado. Con los proyectos m√°s peque√±os, se puede conseguir el mismo resultado con un directorio de test nomas - con las pocas lineas de c√≥digo fuente que tiene Valadate es posible que se caben dentro de un archivo solo! Dado que esperamos que el proyecto se crezca considerablemente, especialmente cuando empezamos de agregar funciones complejas como pruebas de BDD y una interfaz gr√°fica tal como varios niveles de pruebas de pruebas, deber√≠amos empezar con una estructura m√°s escalable.&lt;/p&gt;
&lt;p&gt;Dale, por fin estamos listo para empezar con las pruebas. Dado que este es un Framework de Pruebas, nos enfrenta una situaci√≥n de huevo o la gallina - que framework vamos a usar para probar nuestro framework? En este caso, la soluci√≥n es sencillo, tenemos el suite de GLib Test a nuestra disposici√≥n lo cual podemos utilizar para escribir las pruebas de base que van a guiar el dise√±o del framework. Una vez que esas pruebas se aproben, podemos pasar de usar Valadate para probar si mismo cuando se agregan nuevas funciones m√°s complejas como Gherkin/Cucumber. Al final, podemos usar esas funciones para pruebas aun m√°s complejas tal como las de validaci√≥n de usuario y integraci√≥n para el proyecto en general. El proceso es iterativo y en cascada, en el sentido que cuando las funciones de un nivel sean suficientemente probadas, serian disponibles para el nivel siguiente de pruebas. Puedes pensar que es como una cebolla, si quieres, o una serie de cascadas pero la imagen mental que tengo yo es m√°s como esta:&lt;/p&gt;
&lt;p&gt;
&lt;iframe allowfullscreen="true" frameborder="0" height="315" src="//www.youtube.com/embed/eMqGdRqj1_0" width="560"&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;p&gt;Pero as√≠ soy yo. Usas cualquier met√°fora que quieres, al fin y al cabo es tu mente.&lt;/p&gt;
&lt;p&gt;As√≠ empezamos utilizando el b√°sico &lt;a href="https://developer.gnome.org/glib/stable/glib-Testing.html"&gt;framework de GLib Testing&lt;/a&gt;. Osea, de veras el Glib Testing Framework tiene mucha potencia y al primero fue dise√±ado seg√∫n la interfaz de xUnit. Es bastante f√°cil usarlo, como este ejemplo del &lt;a href="https://wiki.gnome.org/Projects/Vala/TestSample"&gt;Wiki de Gnome Vala&lt;/a&gt; muestra:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;add_foo_tests&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/vala/test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;add_foo_tests&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adem√°s, tiene las utilidades de gtester y gtester-report las cuales son integrados bien con las cadenas de herramienta existentes y son capaces de producir los resultados de las pruebas en varios formatos.&lt;/p&gt;
&lt;p&gt;Las desventajas principales del GLib Testing Framework, y por lo tanto la necesidad de Valadate en absoluto, son:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No est√° particularmente orientado hacia objetos - la clases de base son todas &lt;code&gt;[Compact]&lt;/code&gt; y no heredan de una clase com√∫n. As√≠ resulta dif√≠cil extenderlas en Vala.&lt;/li&gt;
&lt;li&gt;Las funciones de los informes de pruebas necesitan ser configuradas para producir algo √∫til, incluso varios 'drivers' o scripts de shell para el proceso anterior.&lt;/li&gt;
&lt;li&gt;No est√° bien documentado&lt;/li&gt;
&lt;li&gt;No escalar bien para los proyectos grandes o para el dise√±o guiado por comportamiento.&lt;/li&gt;
&lt;li&gt;Es verboso y dif√≠cil de leer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La mayor√≠a de esas limitaciones se pueden resolver de una manera u otro, as√≠ deber√≠a bastar como un punto de partida. Si sigamos los principios de dise√±o guiado por pruebas deber√≠a ser obvio cuando tendremos construir algo m√°s poderos o flexible.&lt;/p&gt;
&lt;p&gt;Cuales pruebas y funciones escribamos en primero? Pues, eso se determina mediante los requisitos que ya recompilamos y como los hemos priorizado. Una de las muchas ventajas de tener una esposa que es una CTO para un fundaci√≥n que va desarrollando software libre de tenencia de la tierra es que yo puedo experimentar vicariamente como ella gestionar el flujo de trabajo de su equipo y las herramientas que usan. Una de las herramientas que reci√©n empezaron de utilizar para la gesti√≥n de los proyectos es &lt;a href="https://waffle.io/"&gt;Waffle&lt;/a&gt;, la que integrarse bien con los asuntos de GitHub y las peticiones de Pull. Waffle es el paso m√°s all√° de la &lt;a href="http://bit.ly/1ZSrRA6"&gt;placa de Trello&lt;/a&gt; que usaba para recopilar los requisitos para Valadate. Waffle permite que cualquiera agrega una petici√≥n de funciones o mandar un resumen de error al Backlog o mediante la &lt;a href="https://waffle.io/chebizarro/valadate"&gt;placa de Waffle&lt;/a&gt; para el proyecto o por crear un &lt;a href="https://github.com/chebizarro/valadate/issues/new"&gt;nuevo asunto&lt;/a&gt; en la pagina de GitHub. El ultimo es la manera m√°s sencilla como no hay que acceder a Waffle en absoluto.&lt;/p&gt;
&lt;p&gt;Una de las filosof√≠as de c√≥digo abierto de mi esposa es no basta lanzar el c√≥digo de fuente. Un proyecto de c√≥digo abierto verdadero es tambi√©n desarrollado en una manera abierta - lo que implica que haya una historia registrada de todas las decisiones, porque y por quien, y todos los asuntos y peticiones de Pull sean revisados y cuando cumplan los requisitos del proyecto (es decir los del usuario) son arreglados o unidos, a pesar de la fuente. Los repositorios p√∫blicos son, por lo menos espejos sino la versi√≥n corriente del &lt;code&gt;master&lt;/code&gt; y las ramas, no solamente una instant√°nea est√°tica del ultimo lanzamiento.&lt;/p&gt;
&lt;p&gt;Tomar una posici√≥n &amp;lt;&lt;Abierto desde el Principio&gt;&amp;gt; es algo esencial en levantar una comunidad fuerte y pluralista de usuarios centrada en el producto. La Sara Sharp, una colaboradora de largo plazo, ha escrito extensamente sobre este tema en su&lt;a href="http://sarah.thesharps.us/2015/10/06/what-makes-a-good-community/"&gt;blog&lt;/a&gt;. Una de las cosas que voy a tomar la oportunidad de realizar ahora es un C√≥digo de Conducta. No voy a hablar de los pros y contras de tener un C√≥digo de Conducta - no veo ning√∫n contra! As√≠ que, como dice la Sarah en su blog - &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No escribimos acuerdos legales sin la ayuda de expertos. No escribimos nuestras propias licencias de c√≥digo abierto. No enrollamos nuestra propia criptograf√≠a sin el consejo de expertos. No debemos enrollar nuestro propio C√≥digo de Conducta.&lt;a href="en ingles"&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tomando esto en cuenta, he inscrito el proyecto en el &lt;a href="http://todogroup.org/opencodeofconduct/#Valadate/chebizarro@gmail.com"&gt;Open Code of Conduct&lt;/a&gt;, lo que est√° usado por GitHub y inspirado por los c√≥digos de conducta y las declaraciones de la diversidad de proyectos como Django, Python y Ubuntu. Vale la pena leerlo, pero ah√≠ va mi resumen - "no seas pelotudo" - y me puedes citar en Twitter.&lt;/p&gt;
&lt;p&gt;Dale, ya est√° para este post. De prontito voy a publicar la parte 5 cuando voy a trazar el roadmap del producto para el primer lanzamiento y contestar la pregunta de "cuando vamos a saber si las pruebas bastaran" con los informes de cobertura. Gracias por leer y si tienes algo de decir, por fa dilo!&lt;/p&gt;</summary><category term="Vala"></category><category term="Open Source"></category><category term="C√≥digo Abierto"></category><category term="Programming"></category><category term="TDD"></category><category term="BDD"></category><category term="CoC"></category></entry><entry><title>Hacia un framework de desarrollo guiado por pruebas para Vala - tercera parte - DevOps - Integraci√≥n Continua con Jenkins</title><link href="http://chrisdaley.biz/es/test-driven-development-in-vala-pt-3.html" rel="alternate"></link><updated>2016-01-19T10:50:00-08:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-01-19:es/test-driven-development-in-vala-pt-3.html</id><summary type="html">&lt;p&gt;&lt;a href="https://es.wikipedia.org/wiki/Integraci%C3%B3n_continua"&gt;Integraci√≥n Continua&lt;/a&gt; o IC est√° ampliamente usado en TDD para mantener la base de c√≥digo de un proyecto bien ordenada, reduciendo los errores y asegurando que hay siempre ejecutables disponibles para desplegar. Proporciona medios para automatizar el proceso de compilar y probar, as√≠ que los desarrolladores se pueden enfocar en escribir pruebas y el c√≥digo que las pasara. Mediante la instalaci√≥n de un sistema que compila y prueba el software en las plataform√°s que las soporta, los problem√°s de despliegue pueden ser identificados temprano y la distribuci√≥n de los nuevos lanzamientos automatizados.  &lt;/p&gt;
&lt;p&gt;Dado que uno de los objetivos de Valadate es integrarse en las cadenas de herramientas ya existente, y con ganas de aprovechar los beneficios numerosos para el proyecto si mismo, tome un peque√±o break de &lt;a href="https://es.wikipedia.org/wiki/DevOps"&gt;DevOps&lt;/a&gt; para instalar un sistema basado en &lt;a href="https://es.wikipedia.org/wiki/Jenkins"&gt;Jenkins&lt;/a&gt; en mi red local. Jenkins es un servidor de Integraci√≥n Continua de codigo abierto que est√° ampliamente usado. Escrito en Java, se puede ejecutar en cualquier en cualquier sistema, dado que tenga suficiente potencia. Llev√°ndose al extremo, decid√≠ instalarlo en un Raspberry Pi 2 que tenia por ah√≠. Por que Jenkins y por que en un Raspberry Pi?&lt;/p&gt;
&lt;p&gt;En primero, el Jenkins es una plataforma robusta y mantenida que est√° ampliamente usado. Hay una pl√©tora de complementos que integrarse bien con Git, Docker, TAP y muchos otros herramientas y protocoles de IC. Se basa en el modelo de amo-esclavo, donde el servidor amo dirige las operaciones de compilar en cualquier numero de esclavos. Un esclavo puede ser cualquier otra computadora en la red que puede comunicarse con Jenkins, o directamente a trav√©s de SSH o con un complemento. Es f√°cil de configurar y sencillamente funciona. Me parec√≠a una buena elecci√≥n por empezar.&lt;/p&gt;
&lt;p&gt;&lt;img alt="La interfaz wed de Jenkins" src="http://chrisdaley.biz/es/../images/jenkins.png" /&gt;&lt;/p&gt;
&lt;p&gt;En segundo, la Raspberry Pi. Uno de las consideraciones en armar el sistema de IC fue que el servidor amo debe ser accesible por la internet y disponible 24x7. Dado que cuando no hay tareas en marcha el servidor est√° m√°s o menos desocupado, utilizando una computadora de plena potencia seria una perdida de energ√≠a y di√≥xido de carbono. Me di cuenta que una de las Raspberry Pi que no estaba ocupada podr√≠a hacer el trabajo, as√≠ que despu√©s de una b√∫squeda r√°pida de Google para confirmar que sea posible, segu√≠ con la instalaci√≥n. La gu√≠a m√°s comprensiva que encontr√© sugiri√≥ huevadas como descargar paquetes de c√≥digo fuente pero dado que esa fue para una versi√≥n previa de Raspbian, intentaba con &lt;em&gt;sudo apt-get install jenkins&lt;/em&gt; y salio nom√°s.&lt;/p&gt;
&lt;p&gt;Con el servidor de Jenkins ya en marcha, agregue el &lt;a href="http://github.com/chebizarro/gherkin-vala"&gt;port de Gherkin&lt;/a&gt; que reci√©n lanc√© como una prueba y arme una maquina con Fedora 23 como esclavo y dentro de 5 minutos lo hab√≠a hecho checkout, compilado y ejecutado las pruebas y...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build Status" src="http://chrisdaley.biz/es/../images/passing.png" /&gt;&lt;/p&gt;
&lt;p&gt;\O/ \O/ \O/&lt;/p&gt;
&lt;p&gt;A pesar de tener poco potencia, la Raspberry Pi parece adecuada para la tarea, como no compilar nada. Algunas de las paginas de configuraci√≥n tarden un ratito en cargar pero para el uso ordinario parece r√°pida. No solo eso, sino puedes hacer &lt;a href="https://www.perforce.com/blog/150910/continuous-delivery-fun-jenkins-raspberry-pi"&gt;cosas chulas&lt;/a&gt; tambi√©n. &lt;/p&gt;
&lt;p&gt;Animado por el √©xito inicial, arme un esclavo de Docker. Para esta configuraci√≥n, reanime un antiguo servidor que hab√≠a sido mothballed, con la idea que como un esclavo de compilar, no necesitara estar en linea todo el tiempo y con Wake On Lan (WOL) puedo mandar que Jenkins despierte el servidor cuando necesite hacer una tarea y adormecerlo cuando se termina. Eso todav√≠a se queda por hacer pero me parece sencillo. &lt;/p&gt;
&lt;p&gt;Con esta configuraci√≥n, el esclavo es un anfitri√≥n de Docker y se arranca y ejecutar un contenedor armado de un Dockerfile en la ra√≠z del repositorio. Es este contenedor que ejecutar la compilaci√≥n, no el anfitri√≥n, asimismo es posible probar tu software en casi cualquier plataforma que se puede dockerize. Que guay no? Entonces, arme un contenedor de Ubuntu y...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build Status" src="http://chrisdaley.biz/es/../images/failing.png" /&gt;&lt;/p&gt;
&lt;p&gt;Como que? Mire el log y...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./.libs/libgherkin3.so: undefined reference to `g_value_init_from_instance&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maldito sea! En la prisa de portear Gherkin, lo hice en mi nuevo sistema de Fedora 23 y no lo hab√≠a probado nada en Ubuntu. Comprob√© los documentos y por cierto, GLib.Value.init_from_instance() est√° disponible a partir de la version 2.42 de GLib y el Ubuntu 15.04 solamente lleva la versi√≥n 2.40. D'oh! As√≠ que tengo que refactorizarlo o declarar GLib 2.42 como requisito.&lt;/p&gt;
&lt;p&gt;Este caso en particular es un muy buen ejemplo de los beneficios de Integraci√≥n Continua. Si tuviera el servidor de Jenkins armado antes de portear el c√≥digo, me habr√≠a dado cuenta de la incompatibilidad casi de inmediato y lo habr√≠a arreglado en aquel momento, m√°s bien que refactorizarlo m√°s tarde. &lt;/p&gt;
&lt;p&gt;Aunque seria bonito ignorar la existencia de los otros sistem√°s operativos, la verdad triste es que no todo el mundo usar el Linux como su escritorio principal, incluso ya mucha gente que tal vez querr√≠a usar mi software. Conciente de esa realidad brutal, decid√≠ armar esclavos de Windows y Mac OSX para probar la compatibilidad multiplataforma de mis proyectos. &lt;/p&gt;
&lt;p&gt;Para el esclavo de Windows, instale una nueva VM de Windows 7 en VirtualBox, ejecutando en el mismo servidor que el anfitriona de Docker. Para la cadena de herramienta, instale MingGW64 y MSYS2 y todas las bibliotecas necesarias y voila! Pues, no exactamente voila, el linker de MinGW es tan despacio que me costo bastante tiempo depurarlo pero ya funciona bien. El proceso no es totalmente autom√°tico - tengo que arrancar y apagarlo a mano. Hay un complemento de VirtualBox para hacer todo eso pero actualmente no soporta la versi√≥n 5. Tambien aprend√≠ por las malas que hay que deshabilitar las actualizaciones autom√°ticas para Windows, si no se trabara en la pantalla de arranca fallada. Adem√°s para darle prisa un poquito, tengo pensado compilar los binarios en un contenedor de Docker a ejecutar las pruebas el la VM de Window para asegurar que funcionan correctamente.&lt;/p&gt;
&lt;p&gt;Ahora bien, si has asistido a cualquier conferencia mayor de Linux en los √∫ltimos anos, podr√≠as concluir que estuvieras en WWDC con todo los equipos de Apple que se ve√≠a en todas partes. Vaya, aun mi esposa, una guru de software libre, usaba un MacBook Air por mucho tiempo hasta que compr√≥ un Microsoft Surface. Y es la verdad, es unos de los equipos m√°s chulo y caro para ejecutar una Maquina Virtual de Linux. No me entiendes mal - tengo uno en el escritorio, lo uso para email, IRC y la sesi√≥n ocasional de Photoshop (por lo menos hasta que el Gimp soporte mejor las tablas). Desafortunadamente, est√° un poco descuidado as√≠ que necesitara un poquito de limpieza antes de ser puesto a disposici√≥n, ojala antes del comienzo de la semana que viene.&lt;/p&gt;
&lt;p&gt;Lo largo del camino, descubr√≠ que nuestro Modem de Cable de mierda, proporcionado por Comcast no soporta las resoluciones DNS de horquilla cuando redirig√≠ los puertos del servidor Jenkins. Intentaba resolver eso mediante instalar dnsm√°sq en la Raspberry Pie pero aun as√≠ necesitaba editar a mano los archivos de resolv.conf en cada maquina. Al final, puse el Modem de Comcast en modo puente y arme un viejo pero confiable WRT-54GL con DD-WRT como el nuevo Gateway/Router. Aun tiene problem√°s con el DHCP de IPv6 pero por lo menos funciona bien.&lt;/p&gt;
&lt;p&gt;Entonces ya est√°, un sistema de Integraci√≥n Continua multiplataforma compilando proyectos basados en Vala. Est√° en vivo en la internet ahora, as√≠ que se puede ver &lt;a href="http://jenkins.valadate.org:8080"&gt;aqui&lt;/a&gt; (se requiere login de Github).&lt;/p&gt;
&lt;p&gt;Venga, ya estamos listos para empezar a construir Valadate! Sintonice de nuevo prontito para la cuarta parte - Quien pone a prueba el probador? &lt;/p&gt;</summary><category term="Vala"></category><category term="Open Source"></category><category term="C√≥digo Abierto"></category><category term="Programming"></category><category term="TDD"></category><category term="BDD"></category><category term="Jenkins"></category><category term="Integraci√≥n Continua"></category><category term="DevOps"></category></entry><entry><title>Hacia un framework de desarrollo guiado por pruebas para Vala - segunda parte - Requisitos y Arquitectura de Sistema</title><link href="http://chrisdaley.biz/es/test-driven-development-in-vala-pt-2.html" rel="alternate"></link><updated>2016-01-13T10:50:00-08:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-01-13:es/test-driven-development-in-vala-pt-2.html</id><summary type="html">&lt;p&gt;Ya hace menos de una semana desde que lanc√© un &lt;a href="http://chrisdaley.biz/es/../test-driven-development-in-vala-pt-1.html"&gt;post&lt;/a&gt; pidiendo input a mi propuesta de armar un framework de desarrollo guiado por pruebas para Vala y las reacciones han empezado de llegar. Se puede ver un resumen &lt;a href="https://gist.github.com/chebizarro/6c949fafe1e9a2c59b26"&gt;aqu√≠&lt;/a&gt; lo que ha sido destilado en una &lt;a href="http://bit.ly/1ZSrRA6"&gt;placa de Trello&lt;/a&gt; lo que se convertir√° en el Product Backlog y el Product Roadmap. La lista me parece m√°s o menos completa hasta ya as√≠ que pienso que est√° al punto de cerrarse y elaborar un Release Plan. Por fin! Puedo empezar a escribir c√≥digo. Uf!&lt;/p&gt;
&lt;p&gt;Los requisitos recopilados hasta ahora son pr√°cticamente iguales con los otros frameworks de pruebas pero este es una buena hora para revisar nuestra Visi√≥n de Producto para ver si nuestro rumbo es correcto. He destacado las partes de la declaraci√≥n que corresponden con caracter√≠sticas para que podamos compararlas.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Para los desarrolladores de Vala que necesitan probar su c√≥digo, &amp;lt; insertar el chulo nombre de herramienta &amp;gt; es un framework de pruebas de gran potencia que &lt;strong&gt;proporciona funciones de pruebas de las caracter√≠sticas de comportamiento, funcionales y  unitarias&lt;/strong&gt; para ayudarles a escribir gran software de c√≥digo abierto. La diferencia con los otros frameworks de prueba y &amp;lt; insertar el chulo nombre de herramienta &amp;gt; es que est√° &lt;strong&gt;dise√±ado especialmente para Vala&lt;/strong&gt;, y &lt;strong&gt;integra perfectamente en las cadenas de herramientas ya existentes&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Echamos un vistazo a los requisitos que hemos recopilado hasta ya y averiguamos si esas caracter√≠sticas se caben con esa visi√≥n. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Product Backlog" src="http://chrisdaley.biz/es/../images/requirements.png" /&gt;&lt;/p&gt;
&lt;h4&gt;proporciona funciones de pruebas de las caracter√≠sticas de comportamiento, funcionales y  unitarias&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Descubrimiento de pruebas&lt;/li&gt;
&lt;li&gt;Pruebas asincr√≥nicas&lt;/li&gt;
&lt;li&gt;Test Runner&lt;/li&gt;
&lt;li&gt;Apoya Gherkin&lt;/li&gt;
&lt;li&gt;Afirmas&lt;/li&gt;
&lt;li&gt;Probar comportamiento protegido&lt;/li&gt;
&lt;li&gt;Pruebas abstractas&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;dise√±ado especialmente para Vala&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Apoya Genie&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;integra perfectamente en las cadenas de herramientas ya existentes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Emisi√≥n de TAP&lt;/li&gt;
&lt;li&gt;Compatible con gstester&lt;/li&gt;
&lt;li&gt;ILC y IGU aut√≥noma&lt;/li&gt;
&lt;li&gt;binarios PIE&lt;/li&gt;
&lt;li&gt;Integrar con herramientas de integraci√≥n continua como Jenkins&lt;/li&gt;
&lt;li&gt;Las pruebas pueden ser compilados y ejecutado si tener el framework instalado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hasta aqu√≠ todo bien! Por supuesto, este es un proyecto √Ågil, as√≠ que est√° lista no es comprensiva ni final y se puede suponer que otras caracter√≠sticas se a√±adieren mientras que otras sean modificadas o quitadas completamente. La cosa m√°s importante es que las caracter√≠sticas se alinea con nuestra visi√≥n. El resultado de este proceso de priorizaci√≥n sera el Product Roadmap y el Product Backlog, los cuales gu√≠an los sprints y los esfuerzos diarios de desarrollo y informen el programa de lanzamiento. Ante todo eso, necesitamos direcci√≥n en como vamos a dividir esas caracter√≠sticas en √°reas funcionales lo que determina como vamos a estructurar nuestra base de c√≥digo y donde podemos empezar escribiendo pruebas. Para esto, se necesita una arquitectura de sistema. &lt;/p&gt;
&lt;h3&gt;La arquitectura de sistema y TDD&lt;/h3&gt;
&lt;p&gt;Uno de los conceptos err√≥neos que tienen los novatos a TDD es que no escribes nada hasta que hay una prueba. Eso confunde a mucha gente y las deja sin saber donde empezar, como una aplicaci√≥n sencilla de la linea de comando requiere una cierta cantidad de c√≥digo repetitivo antes de procesar el input del usuario. Desde este punto, muchos novatos escribir√≠an montones de pruebas redundantes o inventan ruedas ya bien probadas de nuevo o renuncian TDD por completo. Hay pocas veces cuando tu c√≥digo sera ejecutando sin dependencias (si solo libc) pues siempre estas escribiendo c√≥digo dentro de un framework existente, si no aproximadamente. La mayor√≠a de estas interacciones con otros frameworks deber√≠a ser encapsulado en las pruebas de integraci√≥n, las que son desarrollada en paralelo con las pruebas unitarias. Las pruebas que informen nuestro dise√±o de sistema son las que prueban sus caracter√≠sticas √∫nicas. Nuestra arquitectura de sistema define esas interacciones y limites y nos da un esqueleto b√°sico para empezar a escribir nuestra base de c√≥digo. Una vez que esta hecha, podemos empezar a escribir las pruebas concretas que nos van a guiar el dise√±o.&lt;/p&gt;
&lt;p&gt;Con un proyecto como este tenemos la ventaja de unas muestras de la t√©cnica anterior, la arquitectura de &lt;a href="https://es.wikipedia.org/wiki/XUnit"&gt;xUnit&lt;/a&gt; siendo la mayor entre ellas. xUnit es un framework flojo que incluye JUnit y Nunit y estipula que cualquier implementaci√≥n tenga una arquitectura com√∫n, como se puede ver en el diagrama abajo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagrama de clases de xUnit" src="http://chrisdaley.biz/es/../images/architecture.png" /&gt;&lt;/p&gt;
&lt;p&gt;De este diagrama podemos aun ver como vamos a estructurar el c√≥digo. Como m√≠nimo, vamos a crear archivos y pruebas distintos para Test, TestRunner, TestSuite, TestCase, TestFixture and TestResult. Si, pruebas para pruebas. Hubiera dicho que esto resultar√≠a interesante... Este nos van a dar el m√≠nimo que necesitamos para armar una cadena de herramientas y crear un repositorio de c√≥digo. Enhorabuena, estamos al punto de empezar! Salvo que todav√≠a no tiene nombre... &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;¬øQu√© tiene un nombre? Lo que llamamos rosa oler√≠a tan fragante con cualquier otro nombre.&lt;/p&gt;
&lt;p&gt;William Shakespeare&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gracias Guili. Todav√≠a no estoy totalmente entusiasmado con el nombre de Valadate, aunque refleja la Vision de Producto de ser dise√±ado especialmente para Vala y que no est√° solamente para las pruebas unitarias. Llamarle VUnit reflejara su procedencia de xUnit pero no es como si hubiera una API r√≠gida para conformarse. T√©cnicamente en este etapa del desarrollo, no importa nada sino que me gustar√≠a evitar los cambios innecesarios m√°s tarde. Todav√≠a se queda m√°s trabajo antes de empezar escribir c√≥digo, as√≠ que voy a dejarlo filtrarse por una dia o dos antes de tomar una decisi√≥n firma. Pues bien, ya es la hora de decir algo si te sientes apasionado de una u otra forma.&lt;/p&gt;
&lt;p&gt;Pero por lo menos tiene un logotipo! Dime lo que piensas...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Un sistema solar estilizado visto por un √°ngulo oblicuo" src="http://chrisdaley.biz/es/../images/valadate_logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;La base fue dise√±ado por &lt;a href="https://thenounproject.com/misirlou/"&gt;misirlou&lt;/a&gt; y agregue los colores chulos. La idea es que simboliza el asteroide ep√≥nimo que da el Vala su nombre.&lt;/p&gt;
&lt;p&gt;Pues ya est√°, vuelva a sintonizar prontito cuando voy a hablar de los Roadmap y Backlog adem√°s como instale Jenkina CI en un Raspberry Pi.&lt;/p&gt;</summary><category term="Vala"></category><category term="C√≥digo Abierto"></category><category term="Programaci√≥n"></category><category term="TDD"></category><category term="BDD"></category></entry><entry><title>Adi√≥s Thin White Duke - un tributo a David Bowie en Vala</title><link href="http://chrisdaley.biz/es/farewell-duke.html" rel="alternate"></link><updated>2016-01-11T17:00:00-08:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-01-11:es/farewell-duke.html</id><summary type="html">&lt;p&gt;Estaba mirando el asteroide 131 Vala, lo que dio su nombre al lenguaje de programaci√≥n, en el &lt;a href="http://ssd.jpl.nasa.gov/sbdb.cgi?sstr=131;cad=1;old=0;orb=1;cov=0;log=0#orb"&gt;JPL Small Object Database&lt;/a&gt;  cuando me llego la noticia triste del fallecimiento de el David Bowie. Como muchos de mi edad, crec√≠a sin saber nada de un mundo sin viaje espacial, el amenazo de guerra nuclear o el Thin White Duke. No hab√≠a otro artista capaz de captar aquel sentido de asombro y miedo de una especie caminando en la cuerda floja hacia su destino. Podr√≠amos tropezar y caer en el olvido o alcanzaremos las estrellas? Eran todos los h√©roes como el Major Tom? Fr√°gil y imperfecto, sin embargo con coraje cautivador.&lt;/p&gt;
&lt;p&gt;Estuve pensando en esas cosas cuando estaba mirando el website de JPL y me di cuenta que el venerable Orbit Viewer applet ya no estaba funcionando. Yo querr√≠a ver unos cuerpos celestes moverse esa ma√±ana con una banda sonora de David Bowie as√≠ que descargue el c√≥digo fuente del applet y lo porte a Vala. Para la musica, agregue un peque√±o reproductor de gstreamer que carga y toca un archivo Midi de &lt;a href="http://www.midiworld.com/files/1018/"&gt;midiworld.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;iframe allowfullscreen="true" frameborder="0" height="315" src="//www.youtube.com/embed/4lQcdikEdJU" width="560"&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;p&gt;Portear c√≥digo de Java a Vala es relativamente f√°cil, especialmente cuando el c√≥digo es m√°s viejo y no tiene muchos de los trucos raros que se han introducido en el lenguaje tras tantos a√±os. La parte m√°s r√°pida de portear fue la biblioteca de funciones para calcular las orbitas, ya que esto es mas o menos pura matem√°tica. La parte mas complicada fue la interfaz, la que cre√© de nuevo en Glade y las rutinas de dibujar para animar todo. Estaba trabajando en un port del motor de f√≠sica Box2D, as√≠ que he resuelto muchos de esos problemas antes. El resultado final se ve arriba.&lt;/p&gt;
&lt;p&gt;Todav√≠a le falta un poquito de trabajo antes de ser completo - solamente el buton de reproducci√≥n funcionar y aun no hay forma de ajustar el puerto de vista - pero esos son f√°ciles de implementar. Si le interesa a alguien, pondr√© todo en un repositorio de Github - tanto las rutinas de la f√≠sica y la animaci√≥n son bien interesante para principiantes a√∫n con la falta de comentarios. &lt;/p&gt;
&lt;p&gt;Pues bien, gracias por mirar y gracias a ti Starman, por todos los a√±os dorados...&lt;/p&gt;</summary><category term="Vala"></category><category term="C√≥digo Abierto"></category><category term="JPL"></category><category term="David Bowie"></category></entry><entry><title>Hacia un framework de desarrollo guiado por pruebas para Vala - primera parte</title><link href="http://chrisdaley.biz/es/test-driven-development-in-vala-pt-1.html" rel="alternate"></link><updated>2016-01-08T10:50:00-08:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-01-08:es/test-driven-development-in-vala-pt-1.html</id><summary type="html">&lt;p&gt;Encontre &lt;a href="https://wiki.gnome.org/Projects/Vala"&gt;Vala&lt;/a&gt; por la primera vez cuando estaba averiguando la posibilidad de portear un viejo programa de c√≥digo abierto desde GTK + 2 a GTK + 3. Yo no estaba muy seguro de qu√© hacer con Vala en aquel momento - era un lenguaje de programaci√≥n orientado a objetos basado en el sistema de objetos de GObject y utilizaba C como el lenguaje intermediario con el compilador de gcc. Despu√©s de leer un mont√≥n de muestras, me llam√≥ la atenci√≥n la elegancia y parsimonia de la sintaxis y c√≥mo fue comprensible de inmediato por mi familiaridad con Java y C #. Jugu√© con algunas aplicaciones de ejemplo y me sorprendi√≥ tal divertido fue utilizarlo tambi√©n. Era GObject sin las interminables resmas de c√≥digo repetitivo. Propiedades ya ten√≠a sentido y el uso de se√±ales resultaba mojo de pavo. Fue soportado por los ambientes de desarrollo integrado (IDE) tal como cualquier otro lenguaje, especialmente por Geany, mi herramienta preferida. Me enganch√©.&lt;/p&gt;
&lt;p&gt;Hab√≠a un problema solamente. Soy un gran fan de &lt;a href="https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas"&gt;desarrollo guiado por pruebas&lt;/a&gt; o TDD (por sus siglas en ingles)  y despu√©s de muchas horas de intensa Google-Fu, encontr√© muy poco sobre el tema en respecto al Vala. Lo que &lt;a href="https://esite.ch/2012/06/writing-tests-for-vala/"&gt;hubo&lt;/a&gt; fue b√°sicamente utilizar las funciones de prueba de la biblioteca GLib y una peque√±a clase adaptador para agrupar los casos de prueba particulares en un conjunto de pruebas. El resultado final se llev√≥ a cabo a trav√©s de &lt;code&gt;gtester&lt;/code&gt; por la l√≠nea de comandos, en general como parte de una cadena de herramientas como Autotools. Esto bastaba para aplicaciones sencillas con interacciones limitadas con el usario, pero en realidad no escala para el &lt;a href="https://es.wikipedia.org/wiki/Desarrollo_guiado_por_comportamiento"&gt;desarrollo guiado por comportamiento&lt;/a&gt; (BDD en ingles). Alguien hab√≠a desarrollado un framework llamado &lt;a href="https://github.com/yorba/valadate"&gt;Valadate&lt;/a&gt; pero esto fue abandonada por sus mantenedores ya hace unos a√±os. Esto fue un verdadero bloqueo para m√≠. La filosof√≠a m√≠a es que de vez en cuando se puede escribir gran software en los momentos furiosos de creatividad pero se precisan pruebas aburridas para producir software de calidad consistentemente.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Su falta de preubas de unidad me resulta molesta" src="http://chrisdaley.biz/es/../images/unit-tests-dv.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;La trampa con el software libre es que solamente no cuesta nada en el cajero. Una vez que llegues a casa, tienes que pagar el costo de mantenimiento en tiempo si quieres seguir utiliz√°ndolo. Ese tiempo podr√≠a ser gastado en hacer contribuciones menores, como la presentaci√≥n de informes de errores o dar ayudar a los nuevos usuarios en los foros o la traducci√≥n de aplicaciones hasta agregando y desarrollando funciones neuvas. Yo veo mucha potencia en Vala pero siento que esta falta le debilita mucho. Los desarrolladores del lenguaje han dado un gran regalo al mundo y su tiempo ser√≠a mejor ocupado en mantenerlo. La soluci√≥n que ya existe es &lt;em&gt;casi&lt;/em&gt; suficiente, pero genera una gran cantidad de c√≥digo para mantener y no hay soporte para BDD. "Alguien deber√≠a hacer algo" es una frase que me molesta mucho al escuchar, porque creo que ese alguien deber√≠a ser la persona que la dijo. Bueno, alguien deber√≠a hacer algo...&lt;/p&gt;
&lt;p&gt;As√≠ que esta entrada del blog es un esfuerzo para tomar la iniciativa. Aunque en este momento tengo un poquito de tiempo libre, eso no var a ser el caso por siempre. Asimismo, no quiero empezar un proyecto vaporware o abandonadoware que ser√≠a agregado a la lista de buenas ideas que alguien ten√≠a. Me gustar√≠a construir algo que sea sostenible, que evolucione con sus usuarios y que podr√≠a ser traspasado a otros mantenedores si no tendr√≠a tiempo suficiente para dedicarme an ello. Me imagino que esto ha sido el manifiesto de miles de proyectos de c√≥digo abierto ya fallados, pero es mejor que nada - as√≠ que hay va ...&lt;/p&gt;
&lt;h3&gt;Tomar la iniciativa&lt;/h3&gt;
&lt;p&gt;Dado que el objetivo del proyecto es capacitar Vala con TDD y BDD, me gustar√≠a utilizar las t√©cnicas de Agile para planificar y desarrollarlo. En este caso, los primeros pasos ser√≠an la creaci√≥n de una visi√≥n de producto y la recopilaci√≥n de los requisitos. Voy a tomar el primer paso (citado porque VISI√ìN DE PRODUCTO).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Para los desarrolladores de Vala que necesitan probar su c√≥digo, &amp;lt; insertar el chulo nombre de herramienta &amp;gt; es un framework de pruebas de gran potencia que proporciona funciones de pruebas de las caracter√≠sticas de comportamiento, funcionales y  unitarias para ayudarles a escribir gran software de c√≥digo abierto. La diferencia con los otros frameworks de prueba y &amp;lt; insertar el chulo nombre de herramienta &amp;gt; es que est√° dise√±ado especialmente para Vala, y integra perfectamente en las cadenas de herramientas ya existentes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Supongo me toca a mi ser el propietario del producto tambi√©n. De veras, no me importa c√≥mo sera llamado - Valadate es suficiente bueno tal como cualquiera, pero estoy abierto a sugerencias. Si hay suficientes ideas siempre podemos tener una encuesta.&lt;/p&gt;
&lt;p&gt;El siguiente paso ser√° la recopilaci√≥n de requisitos, lo que ya tengo algunas ideas, pero me gustar√≠a saber lo que los usuarios potenciales piensan. Por eso he armado una pizarra Trello y si deseas sugerir una funci√≥n o comentar sobre una que ya existe, &lt;a href="http://bit.ly/1ZSrRA6"&gt;haz clik aqu√≠&lt;/a&gt; y hazte o√≠r. Si eso no es su medio preferido, me puedes pingear en &lt;a href="http://twitter.com/chebizarro"&gt;Twitter&lt;/a&gt; o en el canal de IRC de Vala (irc.gimp.org #vala), apodo: &lt;code&gt;bizarro&lt;/code&gt;. Una herramienta como esta va a vivir o morir debido a su aptitud para el uso, as√≠ que no te callas por favor!&lt;/p&gt;
&lt;p&gt;Ya est√° - en el pr√≥ximo post voy a resumir los requisitos que habr√≠a recopilado y poner en la mesa las opciones para la arquitectura del sistema adem√°s de elaborar un calendario provisional para la primera versi√≥n. Gracias por escuchar y no olvides de unirse a la conversaci√≥n si tienes algo que decir.&lt;/p&gt;</summary><category term="Vala"></category><category term="Open Source"></category><category term="C√≥digo Abierto"></category><category term="Programming"></category><category term="TDD"></category><category term="BDD"></category></entry><entry><title>Gherkin for Vala</title><link href="http://chrisdaley.biz/es/gherkin-for-vala-en.html" rel="alternate"></link><updated>2016-01-04T20:50:00-08:00</updated><author><name>Chris Daley</name></author><id>tag:chrisdaley.biz,2016-01-04:es/gherkin-for-vala-en.html</id><summary type="html">&lt;p&gt;I've had some spare time recently to work on some pet projects and get them into a decent enough shape that they could be subjected to the withering gaze of the Panopticon. One in particular is a port of the Gherkin language to Vala. So what is Gherkin exactly and why should you care?&lt;/p&gt;
&lt;p&gt;From the &lt;a href="https://github.com/cucumber/cucumber/wiki/Gherkin"&gt;Gherkin wiki&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gherkin is the language that &lt;a href="https://cucumber.io/"&gt;Cucumber&lt;/a&gt; understands. It is a Business Readable, Domain Specific Language that lets you describe software‚Äôs behaviour without detailing how that behaviour is implemented.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gherkin is available for a host of languages and is tightly integrated into JUnit for example. Its syntax is pretty straightforward and designed to be intelligible by non-technical people:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  Feature: Some terse yet descriptive text of what is desired
  Textual description of the business value of this feature
  Business rules that govern the scope of the feature
   Any additional information that will make the feature easier to understand

   Scenario: Some determinable business situation
     Given some precondition
       And some other precondition
      When some action by the actor
       And some other action
       And yet another action
      Then some testable outcome is achieved
       And something else we can check happens too

   Scenario: A different situation
       ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Gherkin parser for Vala, which you can get &lt;a href="https://github.com/chebizarro/gherkin-vala"&gt;here&lt;/a&gt; reads in Feature files and builds a tree of elements that can then either be manipulated directly or output as JSON.&lt;/p&gt;
&lt;p&gt;The parser by itself is not tremendously useful, but is one of the building blocks for a comprehensive testing framework for Vala and by extension, GObject that I am presently scoping. If this is something you're interested in, and I assume it is since you've read this far, then I'd encourage you to join the conversation.&lt;/p&gt;</summary><category term="Vala"></category><category term="Open Source"></category><category term="Programming"></category><category term="TDD"></category><category term="BDD"></category></entry></feed>